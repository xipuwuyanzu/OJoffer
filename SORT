package com.atguigu.data;

public class Boom {

	public static void main(String[] args) {

		int[] array = new int[] { 9, 1, 5, 8, 3, 7, 4, 6, 2 };
		// array[1]=9;
		// array[2]=1;
		// array[3]=5;
		// array[4]=8;
		// array[5]=3;
		// array[6]=7;
		// array[7]=4;
		//
		// array[8]=6;
		// array[9]=2;
//       int[] arrayNew = new int[10];
       
		QuickSort(array,0,8);
       
//		Heapsort(array);
		for (int i = 0; i < array.length; i++) {
			System.out.println(array[i]);
		}

	}

	// 冒泡排序
	public static void sort(int[] array) {

		boolean flag = true;
		for (int i = 0; i < array.length - 1 && flag; i++) {

			flag = false;
			for (int j = array.length - 2; j >= i; j--) {
				if (array[j] > array[j + 1]) {
					int temp = array[j];
					array[j] = array[j + 1];
					array[j + 1] = temp;
					flag = true;
				}
			}

		}

	}

	// 选择排序
	public static void SelectionSort(int[] array) {
		int i, j, min;
		for (i = 0; i < array.length - 1; i++) {
			min = i;
			for (j = i + 1; j < array.length; j++) {

				if (array[j] < array[min]) {
					min = j;
				}

			}
			if (min != i) {
				int temp = array[min];
				array[min] = array[i];
				array[i] = temp;

			}
		}
	}

	// 直接插入排序
	public static void StraightInsertionSort(int[] array) {
		int temp = 0;
		int j;
		int i;
		for (i = 1; i < array.length; i++) {
			if (array[i] < array[i - 1]) {
				temp = array[i];
			}
			// 这里必须是j>=0在前面，因为&&是一个短路的符号。
			for (j = i - 1; j >= 0 && array[j] > temp; j--) {
				array[j + 1] = array[j];

			}
			array[j + 1] = temp;
		}

	}

	// 希尔排序
	public static void ShellSort(int[] array) {
		int temp;
		int j;
		int increment = array.length;
		do {
			increment = increment / 3 + 1;
			for (int i = increment; i < array.length; i++) {

				if (array[i] < array[i - increment]) {
					temp = array[i];
					for (j = i - increment; j >= 0 && array[j] > temp; j -= increment) {
						array[j + increment] = array[j];
					}
					array[j + increment] = temp;
				}

			}

		} while (increment > 1);

	}

	// 堆排序主函数
	public static void Heapsort(int[] array) {

		int length = array.length - 1;
		for (int i = length / 2 - 1; i >= 0; i--) {
			HeapAdjust(array, i, length);
		}

		for (int i = length; i > 0; i--) {
			int temp = array[0];
			array[0] = array[i];
			array[i] = temp;
			HeapAdjust(array, 0, i - 1);
		}

	}

	// 堆排序实现一个堆排序的主要算法
	public static void HeapAdjust(int[] array, int s, int m) {
		// 这个函数的意思是就定点不满足大堆顶的意思
		int temp, j;
		temp = array[s];
		for (j = s * 2 + 1; j <= m; j = j * 2) {
			if (j < m && array[j] < array[j + 1]) {
				j++;
			}
			if (temp >= array[j]) {
				break;
			}
			array[s] = array[j];
			s = j;

		}
		array[s] = temp;

	}
	//归并排序
	public static void MSort(int[] SR,int[] TR, int s, int t){
		
		int [] TR2 = new int[SR.length];
		if(s==t){
		 TR[s]=SR[s];
		 
		}else{
			int m=(s+t)/2;
			MSort(SR,TR2,s,m);
			MSort(SR,TR2,m+1,t);
			MergeSort(TR2,TR,s,m,t);
		}
	
		
	}

	private static void MergeSort(int[] TR2, int[] TR, int s, int m, int t) {
		int k,j,l,i;
		i=s;
		for(k=s,j=m+1;i<=m&&j<=t;k++){
			if(TR2[i]<TR2[j]){
				TR[k]=TR2[i++];
				
			}else{
				TR[k]=TR2[j++];
			}
			
		}
		if(i<=m){
			for(l=0;l<=m-i;l++){
				TR[k+l]=TR2[i+l];
			}
		}
		if(j<=t){
			for(l=0;l<=t-j;l++){
				TR[k+l]=TR2[j+l];
			}
			
		}
		
	}
	//快速排序
	public static void QuickSort(int[] array,int s,int t){
		
		if(s<t){
			
		int	midpotint= Partition(array,s,t);
		QuickSort(array,s,midpotint-1);
		QuickSort(array,midpotint+1,t);
			
		}
	}

	private static int Partition(int[] array, int low, int high) {
		int pivotkey = array[low];
		int temp;
		while(low<high){
			while(low<high&&array[high]>=pivotkey){
				high--;
			}
			 temp=array[high];
			array[high]=array[low];
			array[low]=temp;
			
			while(low<high&&array[low]<=pivotkey){
				low++;
			}
			
			 temp=array[low];
			array[low]=array[high];
			array[high]=temp;
			
		}
		return low;
	}
	
	
	
	
	
	

}
